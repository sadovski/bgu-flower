Built into the Simple Switch support of multiple switches 

Datapath and Simple Switch modifications - variant A:

1) Each flower_datapath entity started by flower_datapath_sup:start_connection()  serves a single TCP connection to the switch
The issue occurs due to  common flower_simple_switch module   

2) flower_datapath:handle_info({tcp, Socket, Data}  shall generate ConnectionID from {IpAddress,Port} provided by net:peername()
This generation might take place after decode_of_pkt(); ConnectionID can be included into Msg  

3) record(ofp_packet_in) shall contain ConnectionID (or SwitchID)

4) choose_destination(), learn_mac() and find_out_port() shall get the ConnectionID parameter

5) New "lrulist" shall be created while processing the "{insert}" request for unknown connection; otherwise do search in the lrulist identified by ConnectionID (what mechanism to use?) - flower_mac_learning.erl


Application modifications - variant B:

Intro:
gen_listener_tcp is activated from flower_tcp_transport:start_link()

flower_tcp_transport:start_link() ====>> gen_listener_tcp:start_link({local, ?MODULE}, ?MODULE, {Port, Options}, [{debug,[trace]})

   Connection is accepted by the following flow:
gen_listener_tcp:handle_info({inet_async, ...   ====>> flower_tcp_transport:handle_accept(.... ====>> [for each TCP connection with the switch the instance of flow_datapath is started] ====>> flower_datapath:start_connection(... ====>> flower_datapath_sup:start_connection(TransportMod)




1) flower_datapath and flower_simple_switch are connected via flower_dispatcher
1.1) flower_simple_switch registers for/via flower_dispatcher:join({packet, in}) events
1.2) flower_datapath notifies the dispatcher via flower_dispatcher:dispatch({packet, in... and similar calls

2) flower_dispatcher is a server
It activates registered processes by calling gen_server:cast(Pid... 

Modifications:
1) To provides separate flower_dispatcher for each flower_datapath. flower_dispatcher will implement the gen_server behavior.
1.1) flower_tcp_transport:handle_accept() will start the flower_dispatcher instance    
1.2) flower_tcp_transport:handle_accept() will start flower_datapath instance (as today, by flower_datapath:start_connection()).
      The Pid of corresponding flower_dispatcher will be provided 
1.3)  flower_tcp_transport:handle_accept() will start  flower_simple_switch instance. It will receive the  flower_dispatcher Pid and
will register at it.
2) There will be no need in the separate flower_simple_switch:start_link() call at the Flower start
3) In flower_sup.erl, the  ?CHILD(flower_dispatcher, worker) shall be replaced by  ?CHILD(flower_dispatcher_sup, supervisor) to be able
to create as many as required flower_dispatchers.
 
